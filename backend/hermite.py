import sympy
from sympy import gcdex,randMatrix
from tqdm import tqdm
import time

def random_linear_diophantine_system(m, n,min=-100,max=100):
    # Construct random integer system A*x = B
    # (We pick x, then define B = A*x.)
    x = randMatrix(n, 1, min=min, max=max)
    A = randMatrix(m, n, min=min, max=max)
    B = A * x
    return A, B, x


def hermite_normal_form(A):

    A = sympy.Matrix(A)

    m, n = A.shape
    
    U = sympy.eye(m)
    k = 0

    # Transformation to upper triangular form
    for j in range(n):
        for i in range(k + 1, m):
            # print(f"processing: A[{i,j}]")
            if A[i, j] != 0:
                # print("Before process")
                # printMatrix(A)
                # print(f"A[k, j] = {A[k, j]}, A[i, j] = {A[i, j]}")
                x,y,d = gcdex(A[k, j], A[i, j])
                B = x * A[k,:] + y * A[i,:]
                a = A[k, j] // d
                b = (A[i, j] // d)
                A[i,:] = a * A[i,:] -  b* A[k,:]
                A[k,:] = B

                B = x * U[k,:] + y * U[i,:]
                U[i,:] = a * U[i,:] - b * U[k,:]
                U[k,:] = B
                # print(f"new A[k, j] = {A[k, j]},new A[i, j] = {A[i, j]}")

                # print("After process")
                # printMatrix(A)
            # else:
            #     print(f"A[{i,j}] == 0")

        k += 1

    # Final reductions
    k = 0
    for j in range(n):
        if A[k, j] < 0:
            A[k,:] = -A[k,:]
            U[k,:] = -U[k,:]

        b = A[k, j]
        if b == 0:
            continue
        else:
            for i in range(k):
                q = A[i, j] // b
                A[i,:] =A[i,:] - (q * A[k,:])
                U[i,:] =U[i,:] - (q * U[k,:])
        k += 1
    return A,U

def linear_diophantine_system_solver(A, B):
    # Convert A, B to sympy
    A_sym = sympy.Matrix(A)
    B_sym = sympy.Matrix(B)

    # Compute hnf
    H,U = hermite_normal_form(A_sym.transpose())

    H_transpose = H.transpose()
    U_transpose = U.transpose()
    
    try:
        H_transpose_inv = H_transpose.inv()
    except:
        raise Exception("There is no unique solution to this system.")
    
    y = H_transpose_inv * B_sym
    x_sym = U_transpose*y


    return x_sym


def tester_hnf(func, m=15, n=15, total_tests=1000):

    fail = 0
    for i in tqdm(range(total_tests)):
        A, B, true_x = random_linear_diophantine_system(m, n)
        got_x = func(A, B)
        if got_x != true_x:
            fail += 1
            print(f"Test {i}: Failed. Expected: {true_x}, Got: {got_x}")

    print()
    print(f"[HNF Solver] Failed tests: {fail}/{total_tests}")

def printMatrix(M):
    for i in range(M.rows):
        print(M.row(i))
if __name__ == "__main__":
    # hnf,U = hermite_normal_form(A)
    # print("Hermite Normal Form of A:")

    # for i in range(hnf.rows):
    #     print(hnf.row(i))

    tester_hnf(linear_diophantine_system_solver,10,10,1000)
    # A = [[9, 5, 4, 8], [-3, -5, 9, -7], [-6, 0, -9, -6], [-3, -5, 9, 5]]
    # b =[[-57], [-18], [69], [-90]]
    # # x = linear_diophantine_system_solver(A,b)
    # A = [[-8, 22, 3, 2, -15, 18, -21], [1, 7, -19, -15, 23, 3, -24], [13, -4, 6, 23, -13, 15, 8], [7, 6, 18, 16, -4, -13, -5], [-17, -17, -19, -9, -1, -18, -8], [16, 10, 13, -25, 16, 1, 5], [20, -11, -11, 11, 8, 17, -20]]
    # H,U = hermite_normal_form(A)
    # print(H)
    # print(U)
    # print(x)
    # A,B,x = random_linear_diophantine_system(7,7,-25,25)
    # print(A)
    # print(B)
    # print(x)
#     A = [[-22, 31, -11, 19, -67, 48, -84, 58, -73, -36, -80, -95, 100, 73, 34, 62, -26, 77, 11, 30, -4, 70, 23, -90, -10, -87, 9, -2, 81, -46], [-99, 
# -39, -93, -13, 26, -64, 67, -96, -31, 16, 10, -36, -48, -87, -87, -37, 98, 65, -20, 48, 48, -97, 99, 20, 11, -19, 0, 46, 5, 46], [-92, -23, -16, 95, 
# 48, 60, -74, -21, 16, 64, 95, 94, 95, 29, -64, 39, 55, -54, 68, -85, 57, -28, 7, -36, 83, 44, 40, 77, -54, -58], [-39, -1, -26, -34, -91, 30, -38, -23, -9, -62, 21, 11, 78, 84, 81, -38, -63, 55, 37, 88, -50, 85, 63, -19, 91, -92, -86, -68, -97, -62], [75, 60, 60, 68, -74, 46, 26, 57, 24, 82, -35, 
# 51, 28, 37, -99, 42, 85, 91, -57, -49, 14, 55, -82, -47, 53, -71, 68, 54, 98, -10], [-27, -33, 39, -77, -95, -7, 55, -6, 16, -89, -3, -59, -10, -70, 
# 26, 87, 72, 62, 33, 18, -39, -31, -28, -8, 27, -46, -84, -38, -60, 64], [80, -63, 26, -15, -92, 16, 54, 4, 55, 76, -24, -33, -92, -64, 9, -36, 44, 30, -27, -9, -48, 62, 85, -20, -33, 10, 80, -43, 81, 5], [33, 94, -55, -87, -38, 42, 94, -45, -90, -33, 5, 83, 37, 56, 84, 12, 12, 40, -37, 94, -84, 66, 55, 18, -20, -55, 11, -97, 29, 37], [49, 75, -42, 94, 4, -80, -33, -87, -21, 57, -97, -59, 80, 19, 77, 38, 86, 42, 100, -84, 83, -87, 31, -45, -84, -59, 60, -98, 44, -96], [-62, -16, 14, -30, 98, -28, -70, 22, 20, -60, 94, 80, -77, 100, -97, 20, 85, 39, 52, 70, 80, 0, 81, -81, -67, 32, 38, 94, 80, -44], [-75, 4, -96, 54, -6, 23, -60, 70, 16, -51, -100, 14, 17, -13, 97, 43, 86, -3, -49, 72, 53, -71, 92, -87, -54, 85, -18, 88, -86, 28], [56, 24, -58, 10, -2, 5, -42, -40, -3, 4, 5, 33, 4, 92, -44, -15, 86, 36, 48, 59, 41, 44, 78, 34, -20, -89, 44, -36, -40, -97], [-6, -43, 20, -12, -82, -51, 62, 59, 52, -35, -6, 0, -13, 28, -5, 9, 99, 100, -58, -82, 35, 89, -57, -65, 58, 90, 100, 30, -65, 1], [-10, 24, 85, -1, 1, 97, -3, 95, 93, -81, 13, -65, -67, 88, 89, -58, -97, -86, 33, 21, -56, 11, 86, 34, -33, -71, 26, -48, -10, -83], [32, 66, 93, 98, 94, -80, -56, 75, 94, -72, 85, -96, -97, -33, 85, -90, 2, 12, 96, 34, -27, -56, 93, 72, -95, -28, 59, -92, -19, -96], [72, -67, -26, 71, -86, -14, -55, -94, -93, 74, -15, -80, -71, -77, 28, 6, -28, 62, -92, -63, -45, 71, -16, -10, -92, 73, 47, 31, 15, 41], [63, -6, -83, 57, 10, 12, -40, 1, -70, 61, 95, -9, 62, 95, 96, -94, -16, -2, 82, 89, -89, 92, -21, -92, 74, -93, 38, -32, 51, 21], [-16, 98, 76, 61, 16, -5, 68, 87, 59, -36, 13, 31, -52, 56, -88, -69, 99, -73, -84, -58, 49, 16, -1, 
# 40, -3, -99, 15, 34, -37, -1], [25, -91, 47, -45, -61, 94, 76, 29, 14, -81, -50, 34, 100, 29, -64, 29, -4, -91, -65, -65, 39, -39, -50, 69, 79, -61, 
# 1, -6, 85, 99], [-6, -61, 88, -67, 18, -61, 99, -86, 37, -29, -26, 62, 25, 20, -31, -93, -88, 85, 11, 1, 70, -1, -4, 88, -87, 74, -69, -47, -51, 73], [58, 79, 43, -38, 15, 23, 80, 51, 80, -36, 93, 69, -8, -31, 59, -79, 32, 70, 47, 64, -11, -13, 30, 7, 88, 30, 49, -88, 24, -58], [-71, -26, -11, 26, 52, 79, 63, -4, -14, 69, -90, -22, 41, 23, 49, -33, 11, -8, -11, 85, 1, 32, 89, -89, 79, -73, -41, -53, -86, -13], [55, -94, 43, 38, -68, -40, 69, 17, -19, -76, 49, 27, 33, 6, -3, 62, 88, 36, 27, 44, 57, 16, -51, -76, 19, 83, -19, 38, 94, 52], [45, -40, -98, -25, 7, 20, -89, -30, -52, 85, -53, 34, 85, -78, -56, 89, 95, -27, 55, 55, 8, -86, 61, 87, -44, -36, -79, 55, -73, -95], [27, -92, 93, -15, 78, -94, 5, -19, -54, 15, 77, 71, -42, 39, -64, -98, 0, -62, 70, -20, -5, -84, 72, 61, -61, -90, -70, 0, -16, 87], [-91, 48, -54, -30, -19, 23, 32, -40, -65, 95, -69, 0, 65, -24, -2, -85, -72, -23, -97, -23, 37, 39, -38, 3, -68, -99, 66, -66, -49, 24], [98, 8, 98, -36, 74, -11, 34, 26, 45, -35, -93, -70, -52, 58, 31, 14, 98, -91, -48, 54, -49, 75, 77, -3, -49, 2, 75, 33, -93, -58], [-56, 13, 79, -99, 22, -66, -52, 41, -72, 89, -32, 74, -87, -42, 79, 0, -27, 67, -55, -97, 77, -31, 80, -15, 
# 13, 33, 34, 5, 78, -44], [84, 92, 24, -62, -53, -87, 26, -99, 4, 72, 51, -92, -18, -77, -92, 81, -10, -16, -34, -84, 68, -63, 78, -24, 84, 60, -24, -99, -22, -39], [-1, -59, 44, 93, -33, 25, -83, 5, 81, 13, 60, -5, -71, -57, -88, 43, -68, 64, -51, -29, 43, 53, 86, -100, 59, 25, 17, -79, -71, -91]]
#     B = [[13347], [-30893], [17517], [3971], [41337], [-15476], [-6241], [-15405], [13711], [1158], [1839], [11451], [7102], [3389], [15657], [12964], [-2530], [5978], [995], [-9433], [4083], [-23043], [4288], [7828], [-8721], [-8560], [-1948], [17779], [-5075], [31823]]
    # start_time = time.time()
    # linear_diophantine_system_solver(A,B)
    # elapsed_time = time.time() - start_time

    # print(f"Time taken: {elapsed_time} seconds")


